# This workflow will build, test and deploy a NodeJS project

name: NodeJS CI, CD

on:
  push:
    paths:
      - "apis/userprofile/**"
  pull_request:
    paths:
      - "apis/userprofile/**"
  workflow_dispatch:
env:
  REGISTRY: openhackufq2qk03acr.azurecr.io
  IMAGE_NAME: devopsoh/api-userprofile
  APP_NAME: openhackufq2qk03userprofile
  PROJECT_PATH: apis/userprofile
  WORK_DIR: apis/userprofile
  RESOURCE_GROUP: openhackufq2qk03rg
jobs:
  buildtestci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v1
      - name: Build with Node
        working-directory: ${{env.WORK_DIR }}
        run: npm install
      - name: Test Node
        working-directory: ${{env.WORK_DIR }}
        run: npm run test
      - name: The job has failed
        if: ${{failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/ISSUE_TEMPLATE2.md

  # This job will build docker image for Node project userprofile
  dockerbuild:
    runs-on: ubuntu-latest
    needs: buildtestci
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Version
        run: sed -i 's/!!version!!/'"$VERSION"'/g' data/healthcheck/user.js
        env:
          VERSION: ${{ github.sha }}
        working-directory: ${{env.WORK_DIR }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ${{env.PROJECT_PATH }}
          file: ${{env.PROJECT_PATH }}/Dockerfile
          tags: ${{env.REGISTRY }}/${{env.IMAGE_NAME }}:${{ github.sha }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    runs-on: ubuntu-latest
    needs: dockerbuild
    if: github.ref == 'refs/heads/master'
    steps:
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{env.APP_NAME }}
          slot-name: staging
          images: ${{env.REGISTRY }}/${{env.IMAGE_NAME }}:${{ github.sha }}
      - run: az webapp restart --name $APP_NAME --resource-group $RESOURCE_GROUP --slot staging
      - name: Wait for deployment to show 
        uses: mydea/action-wait-for-api@v1
        with:
          url: "https://${{ env.APP_NAME }}-staging.azurewebsites.net/api/healthcheck/user"
          expected-response-field: "version"
          expected-response-field-value: ${{ github.sha }}
          interval: 1
      - run: az webapp deployment slot swap --name $APP_NAME --resource-group $RESOURCE_GROUP --slot staging --target-slot production
      - name: Check if production is healthy
        id: health-check
        uses: mydea/action-wait-for-api@v1
        with:
          url: "https://${{ env.APP_NAME }}.azurewebsites.net/api/healthcheck/user"
          expected-response-field: "status"
          expected-response-field-value: "not-healthy-to-trigger-rollback"
          interval: 10
          timeout: 120
      - name: Rollback on fail
        if: steps.health-check.outcome == 'failure'
        run: az webapp deployment slot swap --name $APP_NAME --resource-group $RESOURCE_GROUP --slot staging --target-slot production  

